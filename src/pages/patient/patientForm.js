import React, { useState } from "react";
import Header from "../../components/Headers/Header";
import {
  Container,
  Row,
  Col,
  Card,
  CardBody,
  Form,
  FormGroup,
  Label,
  Input,
  Button,
} from "reactstrap";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const PatientForm = () => {
  const [formData, setFormData] = useState({
    id_card: "",
    patient_id: "",
    name: "",
    gender: "Nam",
    birth_date: "",
    phone: "",
    address: "",
  });

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const navigate = useNavigate();

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError("");

    // ‚úÖ Ki·ªÉm tra CMND/CCCD ƒë√∫ng 12 s·ªë
    if (!/^\d{12}$/.test(formData.id_card)) {
      toast.error("‚ùå CMND/CCCD ph·∫£i g·ªìm ƒë√∫ng 12 ch·ªØ s·ªë!");
      setLoading(false);
      return;
    }

    const formattedData = {
      id_card: formData.id_card,
      patient_id: formData.patient_id || `PAT${Date.now()}`,
      name: formData.name,
      gender: formData.gender === "Nam" ? true : false,
      birth_date: formData.birth_date,
      phone: formData.phone,
      address: formData.address,
    };

    try {
      const response = await axios.post(
        "http://localhost:5001/api/patients",
        formattedData,
        { headers: { "Content-Type": "application/json" } }
      );

      if (response.status === 201) {
        toast.success("üéâ Th√™m b·ªánh nh√¢n th√†nh c√¥ng!", {
          position: "top-right",
          autoClose: 1500,
        });
        setTimeout(() => navigate("/patient"), 1600);
      }
    } catch (err) {
      setError("C√≥ l·ªói x·∫£y ra khi th√™m b·ªánh nh√¢n. Vui l√≤ng th·ª≠ l·∫°i.");
      toast.error("‚ùå L·ªói: Kh√¥ng th·ªÉ th√™m b·ªánh nh√¢n!", {
        position: "top-right",
        autoClose: 1500,
      });
      console.error("Error adding patient:", err.response?.data || err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <Header />
      <Container fluid className="mt-4">
        <Row>
          <Col>
            <h3 className="text-dark">Th√™m b·ªánh nh√¢n</h3>
            <p className="text-muted">Qu·∫£n l√Ω b·ªánh nh√¢n / Th√™m b·ªánh nh√¢n</p>
          </Col>
        </Row>

        <Card className="mt-4">
          <CardBody>
            <Row>
              <Col md="6">
                <h4 className="text-dark">Th√¥ng tin b·ªánh nh√¢n</h4>
                <p className="text-muted">ƒêi·ªÅn t·∫•t c·∫£ th√¥ng tin b√™n d∆∞·ªõi</p>
                <Form onSubmit={handleSubmit}>
                  <FormGroup>
                    <Label for="id_card">
                      CMND/CCCD <span className="text-danger">*</span>
                    </Label>
                    <Input
                      type="text"
                      id="id_card"
                      name="id_card"
                      value={formData.id_card}
                      onChange={handleChange}
                      placeholder="Nh·∫≠p CMND/CCCD"
                      pattern="\d{12}"
                      title="CMND/CCCD ph·∫£i g·ªìm ƒë√∫ng 12 ch·ªØ s·ªë"
                      required
                      maxLength={12}
                    />
                  </FormGroup>

                  <FormGroup>
                    <Label for="patient_id">
                      M√£ b·ªánh nh√¢n <span className="text-danger">*</span>
                    </Label>
                    <Input
                      type="text"
                      id="patient_id"
                      name="patient_id"
                      value={formData.patient_id}
                      onChange={handleChange}
                      placeholder="Nh·∫≠p m√£ b·ªánh nh√¢n (ho·∫∑c ƒë·ªÉ tr·ªëng ƒë·ªÉ t·ª± t·∫°o)"
                    />
                  </FormGroup>

                  <FormGroup>
                    <Label for="name">
                      H·ªç v√† t√™n <span className="text-danger">*</span>
                    </Label>
                    <Input
                      type="text"
                      id="name"
                      name="name"
                      value={formData.name}
                      onChange={handleChange}
                      placeholder="Nh·∫≠p h·ªç v√† t√™n"
                      required
                    />
                  </FormGroup>

                  <FormGroup>
                    <Label for="phone">
                      S·ªë ƒëi·ªán tho·∫°i <span className="text-danger">*</span>
                    </Label>
                    <Input
                      type="tel"
                      id="phone"
                      name="phone"
                      value={formData.phone}
                      onChange={handleChange}
                      placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                      required
                    />
                  </FormGroup>

                  <FormGroup>
                    <Label for="gender">
                      Gi·ªõi t√≠nh <span className="text-danger">*</span>
                    </Label>
                    <div>
                      <Label className="mr-4">
                        <Input
                          type="radio"
                          name="gender"
                          value="Nam"
                          checked={formData.gender === "Nam"}
                          onChange={handleChange}
                        />
                        Nam
                      </Label>
                      <Label>
                        <Input
                          type="radio"
                          name="gender"
                          value="N·ªØ"
                          checked={formData.gender === "N·ªØ"}
                          onChange={handleChange}
                        />
                        N·ªØ
                      </Label>
                    </div>
                  </FormGroup>

                  <FormGroup>
                    <Label for="birth_date">
                      Ng√†y sinh <span className="text-danger">*</span>
                    </Label>
                    <Input
                      type="date"
                      id="birth_date"
                      name="birth_date"
                      value={formData.birth_date}
                      onChange={handleChange}
                      required
                    />
                  </FormGroup>

                  <FormGroup>
                    <Label for="address">
                      ƒê·ªãa ch·ªâ <span className="text-danger">*</span>
                    </Label>
                    <Input
                      type="text"
                      id="address"
                      name="address"
                      value={formData.address}
                      onChange={handleChange}
                      placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ"
                      required
                    />
                  </FormGroup>

                  {error && <p className="text-danger">{error}</p>}

                  <Button color="success" className="mr-2" type="submit" disabled={loading}>
                    {loading ? "ƒêang l∆∞u..." : "L∆∞u l·∫°i"}
                  </Button>
                  <Button color="light" onClick={() => navigate("/patient")}>
                    Quay l·∫°i
                  </Button>
                </Form>
              </Col>

              <Col md="6">
                {/* B·∫°n c√≥ th·ªÉ th√™m n·ªôi dung ph·ª• b√™n ph·∫£i t·∫°i ƒë√¢y */}
              </Col>
            </Row>
          </CardBody>
        </Card>
      </Container>

      <ToastContainer />
    </>
  );
};

export default PatientForm;
